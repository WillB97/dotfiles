#!/bin/bash
# Displays the default device, volume, and mute status for i3blocks

# setup changing profile or sink

AUDIO_HIGH_SYMBOL='  '

AUDIO_MED_THRESH=50
AUDIO_MED_SYMBOL='  '

AUDIO_LOW_THRESH=0
AUDIO_LOW_SYMBOL='  '

AUDIO_MUTED_SYMBOL='  '

AUDIO_INTERVAL=5

DEFAULT_COLOR="#ffffff"
MUTED_COLOR="#a0a0a0"

USE_DESCRIPTION=0


while getopts dH:M:L:X:T:t:C:c:i:h opt; do
    case "$opt" in
        d) USE_DESCRIPTION=1 ;;
        H) AUDIO_HIGH_SYMBOL="$OPTARG" ;;
        M) AUDIO_MED_SYMBOL="$OPTARG" ;;
        L) AUDIO_LOW_SYMBOL="$OPTARG" ;;
        X) AUDIO_MUTED_SYMBOL="$OPTARG" ;;
        T) AUDIO_MED_THRESH="$OPTARG" ;;
        t) AUDIO_LOW_THRESH="$OPTARG" ;;
        C) DEFAULT_COLOR="$OPTARG" ;;
        c) MUTED_COLOR="$OPTARG" ;;
        i) AUDIO_INTERVAL="$OPTARG" ;;
        h)  echo -e "Usage: volume-pulse [-d] [-H symb] [-M symb] [-L symb] [-X symb]"
            echo -e "    [-T thresh] [-t thresh] [-C color] [-c color] [-i inter] [-h]"
            echo -e "Options:"
            echo -e "-d\tUse device description instead of name if possible"
            echo -e "-H\tSymbol to use when audio level is high. Default: '$AUDIO_HIGH_SYMBOL'"
            echo -e "-M\tSymbol to use when audio level is medium. Default: '$AUDIO_MED_SYMBOL'"
            echo -e "-L\tSymbol to use when audio level is low. Default: '$AUDIO_LOW_SYMBOL'"
            echo -e "-X\tSymbol to use when audio is muted. Default: '$AUDIO_MUTED_SYMBOL'"
            echo -e "-T\tThreshold for medium audio level. Default: $AUDIO_MED_THRESH"
            echo -e "-t\tThreshold for low audio level. Default: $AUDIO_LOW_THRESH"
            echo -e "-C\tColor for non-muted audio. Default: $DEFAULT_COLOR"
            echo -e "-c\tColor for muted audio. Default: $MUTED_COLOR"
            echo -e "-i\tInterval size of volume increase/decrease. Default: $AUDIO_INTERVAL"
            echo -e "-h\tShow this help text"
            exit 0;;
    esac
done

function move_sinks_to_new_default {
    DEFAULT_SINK=$1
    pacmd list-sink-inputs | grep index: | grep -o '[0-9]\+' | while read SINK
    do
        pacmd move-sink-input $SINK $DEFAULT_SINK
    done
}

function set_default_playback_device_next {
    inc=${1:-1}
    num_devices=$(pacmd list-sinks | grep -c index:)
    sink_arr=($(pacmd list-sinks | grep index: | grep -o '[0-9]\+'))
    default_sink_index=$(( $(pacmd list-sinks | grep index: | grep -no '*' | grep -o '^[0-9]\+') - 1 ))
    default_sink_index=$(( ($default_sink_index + $num_devices + $inc) % $num_devices ))
    default_sink=${sink_arr[$default_sink_index]}
    pacmd set-default-sink $default_sink
    move_sinks_to_new_default $default_sink
}

function print_block {
    for name in INDEX NAME VOL MUTED DESCRIPTION; do
        read $name
    done < <(pacmd list-sinks |awk '
        /\s*\*/{if(default_sink==1)exit 0;default_sink=1}
        {if(default_sink!=1)next}
        /index:/{print $3}
        /name:/{
            match($0,/\.([A-Za-z0-9-]+)>/,a)
            print a[1]
        } /volume: front/{
            match($0,"([0-9]+)%",b)
            print b[1]
        } /muted:/{
            match($0,/(\w+)$/,c)
            print c[1]
        } /device\.desc/{
            match($0,/"(.*)"/,d)
            print d[1]
        }
    ')

    DESCRIPTION=${DESCRIPTION#Built-in Audio }
    DESCRIPTION=${DESCRIPTION/ Stereo}
    NAME=${DESCRIPTION:-$NAME}

    if [[ $MUTED =~ "no" ]] ; then
        SYMBOL=$AUDIO_HIGH_SYMBOL
        [[ $VOL -le $AUDIO_MED_THRESH ]] && SYMBOL=$AUDIO_MED_SYMBOL
        [[ $VOL -le $AUDIO_LOW_THRESH ]] && SYMBOL=$AUDIO_LOW_SYMBOL
        COLOR=$DEFAULT_COLOR
        echo "<span color=\"$COLOR\">$SYMBOL$VOL% [$NAME]</span>"
    else
        SYMBOL=$AUDIO_MUTED_SYMBOL
        COLOR=$MUTED_COLOR
        echo "<span color=\"$COLOR\"><i>$SYMBOL$VOL% [$NAME]</i></span>"
    fi
}

# case "$BLOCK_BUTTON" in
#     1) set_default_playback_device_next ;;
#     2) amixer -q -D pulse sset Master toggle ;;
#     3) set_default_playback_device_next -1 ;;
#     4) amixer -q -D pulse sset Master $AUDIO_INTERVAL%+ ;;
#     5) amixer -q -D pulse sset Master $AUDIO_INTERVAL%- ;;
# esac

print_block
while read -r EVENT; do
    print_block
done < <(pactl subscribe | stdbuf -oL grep change) &

while read BUTTON; do 
    case "$BUTTON" in
        # 1) set_default_playback_device_next ;;
        # 3) set_default_playback_device_next -1 ;;
        1) amixer -q -D pulse sset Master toggle ;;
        2) i3-msg -q exec 'pavucontrol -t 5';; # set profile
        3) i3-msg -q exec 'pavucontrol -t 3';; # set sink
        4) amixer -q -D pulse sset Master $AUDIO_INTERVAL%+ ;;
        5) amixer -q -D pulse sset Master $AUDIO_INTERVAL%- ;;
    esac
done
